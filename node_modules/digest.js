var url = require('url');
var crypto = require('crypto');
var authorizedSources = new Array();
var key = require('./digest.key.json')['key'];
var maxage = 300000; // 5 min

// If the IP is authorized return true, else try to found the information necessary in headers
var getStatus = function (req, res) {
	console.log(new Date() + " - Digest => source ip: " + req.connection.remoteAddress);
	if (IsIpAuthorized(req.connection.remoteAddress)) {
		console.log(new Date() + " - Digest => Already authorized address");
		return true;
	} else {
		var headersToString ='';
		var nonce = req.headers["nonce"];
		var token = req.headers["token"];
		var sign = req.headers["sign"];
		console.log(new Date() + " - Digest => headers: " + nonce + ", " + token + ", " + sign);
		if (nonce && token && sign) {
			// check nonce
			if (nonce < Math.round(new Date().getTime() - maxage) || nonce > Math.round(new Date().getTime())) {
				console.log(new Date() + " - Digest => Invalid nonce. Nonce is : " + nonce + " Limit is : "+Math.round(new Date().getTime() - maxage));
				return false;
			}
			// check sign
			var hmac = crypto.createHmac('sha1', key);
			console.log(new Date() + " - Digest => message : http://" + req.hostname + ":8080" + req.url + ", " + nonce + ", " + token);
			hmac.update("http://" + req.hostname + ":8080" + req.url + ", " + nonce + ", " + token);
			var digest = hmac.digest('base64');
			console.log(new Date() + " - Digest => Expected signature = " + digest);
			if (sign == digest) {
				authorizedSources.push(req.connection.remoteAddress);
				return true;	
			} 
		} 
		return false;
	}
}

var rejectRequest = function(req, res, config) {
	console.log(new Date() + " - Digest => rejectRequest: url =>" + req.url + ", auth page =>" + config["authentication_page"]);
	if (req.url == "/" && config["authentication_page"]) {
		res.setHeader('Content-type', 'text/html');
		res.render(config["authentication_page"], {server_config: config});
		res.end();
		return true;
	} else {
		res.writeHead(401, {
			'nonce': new Date().getTime(), 
			'token': Math.round(Math.random()*10000000)
		});
		res.end();
		return false;
	}
}

var IsIpAuthorized = function (ip) {
	return require('utils').inArray(authorizedSources, ip);
}

exports.getStatus = getStatus;
exports.IsIpAuthorized = IsIpAuthorized;
exports.rejectRequest = rejectRequest;
