var url = require('url');
var crypto = require('crypto');

var digest = function() {
	this.config = require('./config/digest.key.json');	
	this.key;;
	this.maxage = 300000; // 5 min
	this.authorizedSources = new Array();
	return this;
	
}

// If the IP is authorized return true, else try to found the information necessary in headers
digest.prototype.getStatus = function (req, res) {
	console.log(new Date() + " - Digest => source ip: " + req.connection.remoteAddress);
	if (this.IsIpAuthorized(req.connection.remoteAddress)) {
		console.log(new Date() + " - Digest => Already authorized address");
		return true;
	} else {
		var headersToString ='';
		var nonce = req.headers["nonce"];
		var token = req.headers["token"];
		var sign = req.headers["sign"];
		console.log(new Date() + " - Digest => headers: " + nonce + ", " + token + ", " + sign);
		if (nonce && token && sign) {
			// check nonce
			if (nonce < Math.round(new Date().getTime() - this.maxage) || nonce > Math.round(new Date().getTime())) {
				console.log(new Date() + " - Digest => Invalid nonce. Nonce is : " + nonce + " Limit is : "+Math.round(new Date().getTime() - this.maxage));
				return false;
			}
			// check sign
			var hmac = crypto.createHmac('sha1', this.key);
			console.log(new Date() + " - Digest => message : http://" + req.hostname + ":8080" + req.url + ", " + nonce + ", " + token);
			hmac.update("http://" + req.hostname + ":8080" + req.url + ", " + nonce + ", " + token);
			var digest = hmac.digest('base64');
			console.log(new Date() + " - Digest => Expected signature = " + digest);
			if (sign == digest) {
				this.authorizedSources.push(req.connection.remoteAddress);
				return true;	
			} 
		} 
		return false;
	}
}

digest.prototype.rejectRequest = function(req, res, config) {
	console.log(new Date() + " - Digest => rejectRequest: url =>" + req.url + ", auth page =>" + config["authentication_page"]);
	if (req.url == "/" && config["authentication_page"]) {
		res.setHeader('Content-type', 'text/html');
		res.render(config["authentication_page"], {server_config: config});
		res.end();
		return true;
	} else {
		res.writeHead(401, {
			'nonce': new Date().getTime(), 
			'token': Math.round(Math.random()*10000000)
		});
		res.end();
		return false;
	}
}

digest.prototype.IsIpAuthorized = function (ip) {
	return require('utils').inArray(this.authorizedSources, ip);
}

var init = function(callback) {
	console.log(new Date() + " - Digest => Initialising security");
	var dig = new digest();
	if (dig.config['key']) {
		console.log(new Date() + " - Digest => Key specified. Loading it");
		dig.key = dig.config["key"];
	}
	if (dig.config['file']) { //using file if defined 
		console.log(new Date() + " - Digest => file specified, trying to load it");
		var fs = require('fs');
		if (fs.existsSync( __dirname + dig.config['file'])) {
			fs.stat( __dirname + dig.config['file'], function(err, stats) {
				if (!err) {
					if (stats.isFile()) {
						fs.readFile( __dirname + dig.config['file'], function(err, data) {
							if (!err) {
								var md5 = crypto.createHash('md5');
								md5.update(data.toString('base64'));
								dig.key = md5.digest('base64');
								return callback(dig);
							} else {
								console.log(new Date() + " - Digest => Error accessing file. If a key is loaded then use it.");
								if (dig.key) return callback(dig);
								else console.log(new Date() + " - Digest => no key specified. Stopping server");
							}
						});
					} else {
						console.log(new Date() + " - Digest => File in configuration is not a standard file. If a key is loaded then use it.");
						if (dig.key)return callback(dig);
						else console.log(new Date() + " - Digest => no key specified. Stopping server");
					}
				} else {
					console.log(new Date() + " - Digest => Error accessing file. If a key is loaded then use it.");
					if (dig.key) return callback(dig);
					else console.log(new Date() + " - Digest => no key specified. Stopping server");
				}
			});
		} else {
			console.log(new Date() + " - Digest => File does not exists. If a key is loaded then use it.");
			if (dig.key) return callback(dig);
			else console.log(new Date() + " - Digest => no file nor key specified. Stopping server");
		}
	} 
}

exports.init = init;
//exports.IsIpAuthorized = IsIpAuthorized;
//exports.rejectRequest = rejectRequest;
